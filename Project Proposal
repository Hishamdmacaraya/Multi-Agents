# Project Proposal: Multi-Agent Collaborative System (MACS)

## 1. Project Title  
**Multi-Agent Collaborative System (MACS)**

## 2. Team Information  
**Team:** Group 1 (AI Dreamers)  
- Win Aung  
- Troy Frost  
- Hisham Macaraya  
- Soriel Martinez  

## 3. Course Information  
- **Course:** ITAI 2376 – Deep Learning in Artificial Intelligence  
- **Term:** Spring 2025  
- **Professor:** Dr. Lina Awodogan  

## 4. Date  
May 7, 2025  

## 5. Abstract / Executive Summary  
The Multi-Agent Collaborative System (MACS) project aims to design, develop, and implement a Python-based system where multiple intelligent software agents collaborate to achieve complex tasks. Leveraging the `spade` (Smart Python Agent Development Environment) framework, MACS will demonstrate key concepts in distributed artificial intelligence, including inter-agent communication via XMPP, task decomposition, role-based specialization (research, editing, critique, coordination), information sharing, and adaptive behaviors. The project will explore the efficacy of multi-agent systems in problem-solving scenarios that benefit from distributed expertise and parallel processing.

## 6. Introduction / Problem Statement  
Many real-world tasks—such as information gathering, analysis, and decision-making—are too complex for a single monolithic AI system. These scenarios require diverse skills, parallel information processing, and synthesis of knowledge from multiple sources. Traditional AI approaches often struggle with scalability, flexibility, and robustness.  

**Core problem:** How can we design a collaborative AI environment in which specialized agents communicate, coordinate, share knowledge, and contribute their unique capabilities to achieve a common objective?

## 7. Proposed Solution / System Architecture  
We propose to develop MACS using Python and the `spade` framework. The system will consist of four specialized agent types:

- **Coordinator Agent**  
  - Receives tasks or queries  
  - Decomposes tasks and assigns sub-tasks to specialist agents  
  - Manages workflow and message routing  
  - Aggregates results into a final output  
  - Validates inputs and enforces basic boundaries  

- **Researcher Agent**  
  - Handles information-gathering requests  
  - Simulates web searches (or accesses local data)  
  - Formats gathered data for other agents  

- **Editor Agent**  
  - Refines and structures information  
  - Performs text summarization and organization using NLP (`spaCy`)  
  - Ensures clarity and coherence  

- **Critic Agent**  
  - Evaluates outputs against quality criteria  
  - Provides feedback and suggests improvements  

**Communication:**  
Agents will exchange asynchronous messages via XMPP (using `spade`), enabling requests, data sharing, and status updates.

**Example Data Flow:**  
1. User query → Coordinator Agent  
2. Coordinator → Researcher Agent  
3. Researcher → Editor Agent  
4. Editor → Critic Agent  
5. Critic → Coordinator  
6. Coordinator → Final output

## 8. Objectives / Goals  
1. Implement a multi-agent system in Python with `spade`.  
2. Define and code four agent roles (Coordinator, Researcher, Editor, Critic).  
3. Establish reliable XMPP-based communication protocols.  
4. Demonstrate collaborative information retrieval and summarization.  
5. Introduce simple agent memory and feedback mechanisms.  
6. Document architecture, design decisions, and communication protocols.

## 9. Scope  
- **In Scope:**  
  - Four core agents with cyclic behaviors and XMPP messaging  
  - Simulated web search and placeholder NLP tasks  
  - Command-line interface for task initiation  
  - Basic in-agent memory for state tracking  

- **Out of Scope:**  
  - Advanced ML/DL for decision-making  
  - GUI or large-scale deployment  
  - Complex natural language parsing beyond simple commands  
  - Real-time high-frequency control applications  

## 10. Methodology / Approach  
1. **Phase 1:** Set up `spade`, develop agent classes with basic message handling.  
2. **Phase 2:** Define message formats, implement end-to-end task flow with placeholders.  
3. **Phase 3:** Add simulated web search, basic NLP for Editor, and evaluation logic for Critic.  
4. **Phase 4:** Integrate all agents, conduct tests, refine behaviors, add memory/feedback.  
5. **Phase 5:** Finalize documentation, demo, and code comments.

## 11. Key Features  
- Modular agent design with separation of concerns  
- Asynchronous XMPP messaging for robust coordination  
- Task delegation and workflow management by the Coordinator  
- Researcher: simulated web search capabilities  
- Editor: placeholder NLP summarization  
- Critic: rule-based evaluation and feedback  
- Simple in-agent memory and reward signals  
- Input validation at the Coordinator level  

## 12. Technologies to be Used  
- **Language:** Python 3  
- **Agent Framework:** `spade` (XMPP-based)  
- **NLP:** `spaCy` (Editor Agent)  
- **HTTP Requests:** `requests` (Researcher Agent)  
- **Development:** Jupyter Notebook & standard IDE  
- **Version Control:** Git & GitHub  

## 13. Expected Outcomes / Deliverables  
- Fully functional Python MACS implementation  
- Source code with clear comments and modular structure  
- GitHub repo with README, this proposal, and agent code  
- Demo showcasing a complete collaborative task  
- Final project report (if required)

## 14. Potential Challenges  
- Configuring and managing an XMPP server  
- Debugging asynchronous, distributed message flows  
- Designing clear, unambiguous message protocols  
- Preventing scope creep within project timeline  
- Integrating and managing external dependencies  

## 15. Conclusion  
MACS will demonstrate the power of distributed AI by orchestrating specialized agents to solve complex tasks collaboratively. Through hands-on experience with `spade`, XMPP, and basic NLP, this project will deepen our understanding of multi-agent systems, coordination protocols, and the challenges of building robust, scalable AI architectures.
